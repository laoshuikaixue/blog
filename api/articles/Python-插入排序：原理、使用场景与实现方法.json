{"title":"Python 插入排序：原理、使用场景与实现方法","uid":"0425545bbf78488183c9b7bbe87131db","slug":"Python-插入排序：原理、使用场景与实现方法","date":"2024-02-09T08:27:12.000Z","updated":"2024-02-09T08:30:12.906Z","comments":true,"path":"api/articles/Python-插入排序：原理、使用场景与实现方法.json","keywords":null,"cover":[],"content":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>插入排序（Insertion Sort）是一种简单直观且易于理解的排序算法，其工作原理类似于我们手动整理扑克牌的过程。通过构建一个有序序列，每次从未排序部分中取出一个元素并将其插入到已排序序列的正确位置，直到整个序列有序。尽管在处理大规模数据时效率较低，但对于小规模数据或部分有序的数据集，插入排序表现出了较好的性能。</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2019/03/insertionSort.gif\" alt=\"插入排序\"></p>\n<h3 id=\"一、插入排序原理\"><a href=\"#一、插入排序原理\" class=\"headerlink\" title=\"一、插入排序原理\"></a>一、插入排序原理</h3><ol>\n<li><strong>构建初始有序序列</strong>：首先将数组的第一个元素视为已排序序列。</li>\n<li><strong>逐个插入</strong>：从第二个元素开始，依次与已排序序列中的元素进行比较，找到合适的插入位置，并将其插入。</li>\n<li><strong>重复上述过程</strong>：继续对剩余未排序元素执行相同的操作，直至所有元素都已排序到位。</li>\n</ol>\n<h3 id=\"二、插入排序步骤详解\"><a href=\"#二、插入排序步骤详解\" class=\"headerlink\" title=\"二、插入排序步骤详解\"></a>二、插入排序步骤详解</h3><p>假设有一个无序数组<code>[5, 3, 8, 6, 7, 2]</code>，按照插入排序的过程：</p>\n<ol>\n<li><p>第一轮：</p>\n<ul>\n<li>数组的第一个元素默认为已排序部分，即<code>[5]</code></li>\n<li>将第二个元素<code>3</code>与<code>5</code>进行比较，发现<code>3</code>小于<code>5</code>，所以将<code>3</code>插入到<code>5</code>之前，得到<code>[3, 5]</code></li>\n</ul>\n</li>\n<li><p>第二轮：</p>\n<ul>\n<li>已排序部分为<code>[3, 5]</code></li>\n<li>将第三个元素<code>8</code>与已排序部分的元素依次比较，无需移动，得到<code>[3, 5, 8]</code></li>\n</ul>\n</li>\n<li><p>继续这个过程，直到所有元素都已排序。</p>\n</li>\n</ol>\n<h3 id=\"三、插入排序代码实现\"><a href=\"#三、插入排序代码实现\" class=\"headerlink\" title=\"三、插入排序代码实现\"></a>三、插入排序代码实现</h3><p>以下是一个简单的插入排序实现：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">insertion_sort</span>(<span class=\"params\">arr</span>):</span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(arr)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 遍历数组中的每个元素</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n):</span><br><span class=\"line\">        current = arr[i]</span><br><span class=\"line\">        j = i - <span class=\"number\">1</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 将当前元素与其左侧的已排序元素进行比较和交换</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> j &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> arr[j] &gt; current:</span><br><span class=\"line\">            arr[j + <span class=\"number\">1</span>] = arr[j]</span><br><span class=\"line\">            j -= <span class=\"number\">1</span></span><br><span class=\"line\">            </span><br><span class=\"line\">        arr[j + <span class=\"number\">1</span>] = current</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、插入排序的使用场景\"><a href=\"#四、插入排序的使用场景\" class=\"headerlink\" title=\"四、插入排序的使用场景\"></a>四、插入排序的使用场景</h3><ul>\n<li>小规模数据集：对于数据量较小的情况，插入排序可以快速完成排序任务，尤其是当数据近乎有序时，其时间复杂度接近O(n)。</li>\n<li>在部分场景下的优化：例如，当待排序数据基本有序时，插入排序能有效减少元素之间的比较次数，从而提高排序效率。</li>\n</ul>\n<p>插入排序的时间复杂度达到O(n²)，因此插入排序也并非首选方案。</p>\n","feature":false,"text":"本文主要介绍了Python 插入排序：原理、使用场景与实现方法...","permalink":"/post/Python-插入排序：原理、使用场景与实现方法","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"编程","slug":"编程","count":15,"path":"api/categories/编程.json"},{"name":"Python","slug":"编程/Python","count":12,"path":"api/categories/编程/Python.json"}],"tags":[{"name":"官方","slug":"官方","count":16,"path":"api/tags/官方.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%95%E8%A8%80\"><span class=\"toc-text\">引言</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">一、插入排序原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%E6%AD%A5%E9%AA%A4%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">二、插入排序步骤详解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">三、插入排序代码实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">四、插入排序的使用场景</span></a></li></ol>","author":{"name":"LaoShui","slug":"blog-author","avatar":"https://forum.dh7zoj.top/img/favicon.ico","link":"/","description":"<p>不忘初心，青春朝气永在</p><p>志在千秋，百年恰是少年</p>","socials":{"github":"https://github.com/laoshuikaixue","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"aliyun_developer":{"icon":"/svg/aliyun.svg","link":"https://developer.aliyun.com/profile/dtvevsc2d4xha"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Python 快速排序：原理、使用场景与实现方法","uid":"70c15220323e313ec6083d38a84c2668","slug":"Python-快速排序：原理、使用场景与实现方法","date":"2024-02-09T08:31:40.000Z","updated":"2024-02-09T08:35:26.136Z","comments":true,"path":"api/articles/Python-快速排序：原理、使用场景与实现方法.json","keywords":null,"cover":[],"text":"本文主要介绍了Python 快速排序：原理、使用场景与实现方法...","permalink":"/post/Python-快速排序：原理、使用场景与实现方法","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"编程","slug":"编程","count":15,"path":"api/categories/编程.json"},{"name":"Python","slug":"编程/Python","count":12,"path":"api/categories/编程/Python.json"}],"tags":[{"name":"官方","slug":"官方","count":16,"path":"api/tags/官方.json"}],"author":{"name":"LaoShui","slug":"blog-author","avatar":"https://forum.dh7zoj.top/img/favicon.ico","link":"/","description":"<p>不忘初心，青春朝气永在</p><p>志在千秋，百年恰是少年</p>","socials":{"github":"https://github.com/laoshuikaixue","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"aliyun_developer":{"icon":"/svg/aliyun.svg","link":"https://developer.aliyun.com/profile/dtvevsc2d4xha"}}}},"feature":false},"next_post":{"title":"Python 选择排序：原理、使用场景与实现方法","uid":"0490642c71381612a7160eef78d1d327","slug":"Python-选择排序：原理、使用场景与实现方法","date":"2024-02-09T08:16:22.000Z","updated":"2024-02-09T08:25:37.452Z","comments":true,"path":"api/articles/Python-选择排序：原理、使用场景与实现方法.json","keywords":null,"cover":[],"text":"本文主要介绍了Python 选择排序：原理、使用场景与实现方法...","permalink":"/post/Python-选择排序：原理、使用场景与实现方法","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"编程","slug":"编程","count":15,"path":"api/categories/编程.json"},{"name":"Python","slug":"编程/Python","count":12,"path":"api/categories/编程/Python.json"}],"tags":[{"name":"官方","slug":"官方","count":16,"path":"api/tags/官方.json"}],"author":{"name":"LaoShui","slug":"blog-author","avatar":"https://forum.dh7zoj.top/img/favicon.ico","link":"/","description":"<p>不忘初心，青春朝气永在</p><p>志在千秋，百年恰是少年</p>","socials":{"github":"https://github.com/laoshuikaixue","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"aliyun_developer":{"icon":"/svg/aliyun.svg","link":"https://developer.aliyun.com/profile/dtvevsc2d4xha"}}}},"feature":false}}