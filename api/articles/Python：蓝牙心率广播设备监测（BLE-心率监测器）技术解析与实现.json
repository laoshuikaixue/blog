{"title":"Python：蓝牙心率广播设备监测（BLE 心率监测器）技术解析与实现","uid":"0b70c99f952905935fd8320ab77327ce","slug":"Python：蓝牙心率广播设备监测（BLE-心率监测器）技术解析与实现","date":"2025-05-04T04:24:18.000Z","updated":"2025-05-04T04:34:52.714Z","comments":true,"path":"api/articles/Python：蓝牙心率广播设备监测（BLE-心率监测器）技术解析与实现.json","keywords":null,"cover":null,"content":"<p>本文旨在技术性地探讨如何利用 Python 脚本与支持蓝牙低功耗（Bluetooth Low Energy, BLE）心率广播功能的设备进行交互，以实时获取心率数据。我们将重点分析涉及的 BLE 协议、GATT 服务模型以及使用 <code>bleak</code> 库的具体 Python 实现，并说明为何像部分华为手表（HUAWEI WATCH）等设备能通过此标准方式被监测。</p>\n<h3 id=\"技术背景：BLE-与-GATT-心率服务\"><a href=\"#技术背景：BLE-与-GATT-心率服务\" class=\"headerlink\" title=\"技术背景：BLE 与 GATT 心率服务\"></a>技术背景：BLE 与 GATT 心率服务</h3><p><strong>1. BLE 角色与通信模式:</strong><br>在本次应用中，Python 脚本运行的计算机作为 <strong>Central（中心设备）</strong>，而心率监测设备（如手表、心率带）作为 <strong>Peripheral（外设）</strong>。我们利用的是 BLE 的 <strong>广播（Advertising）</strong> 和 <strong>连接（Connection）</strong> 模式。支持心率广播的外设会主动发出广播包（Advertising Packets），其中通常包含设备信息和其支持的关键服务 UUID。</p>\n<p><strong>2. GATT (Generic Attribute Profile):</strong><br>GATT 是 BLE 协议栈上层定义数据交换格式和结构的标准。数据被组织在服务（Services）和特征（Characteristics）中：</p>\n<ul>\n<li><strong>Heart Rate Service (HRS):</strong> 由蓝牙技术联盟（Bluetooth SIG）定义的标准服务，UUID 为 <code>0x180D</code>。外设通过在广播包中包含此 UUID 或在连接后暴露此服务来表明其支持心率测量功能。</li>\n<li><strong>Heart Rate Measurement Characteristic:</strong> HRS 内的核心特征，UUID 为 <code>0x2A37</code>。该特征的值包含了实际的心率测量数据。它的关键属性（Property）是 <strong>Notify</strong>。</li>\n<li><strong>Notify 属性:</strong> 对于像心率这样实时变化的数据，Notify 机制最为高效。Central 设备向 Peripheral 设备订阅（Subscribe）此特征后，每当 Peripheral 的心率数据更新时，它会<strong>主动</strong>将新数据通过通知（Notification）发送给 Central，而无需 Central 不断轮询（Read）。</li>\n</ul>\n<p><strong>3. Heart Rate Measurement 数据结构 (UUID <code>0x2A37</code>):</strong><br>根据 Bluetooth SIG 规范，此特征的数据包通常结构如下：</p>\n<ul>\n<li><strong>Byte 0: Flags:</strong><ul>\n<li>Bit 0: 心率值格式 (0 &#x3D; UINT8, 1 &#x3D; UINT16)。</li>\n<li>Bits 1-2: 传感器接触状态。</li>\n<li>Bit 3: 能耗指示是否存在。</li>\n<li>Bit 4: RR-Interval 数据是否存在。</li>\n</ul>\n</li>\n<li><strong>Byte 1 onwards:</strong><ul>\n<li>心率值 (根据 Flags Bit 0 决定是 1 字节还是 2 字节，小端序 Little-Endian for UINT16)。</li>\n<li>(可选) 能耗值 (UINT16)。</li>\n<li>(可选) RR-Interval 值序列 (每项 UINT16，单位 1&#x2F;1024 秒)。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Python-实现-使用-bleak-库\"><a href=\"#Python-实现-使用-bleak-库\" class=\"headerlink\" title=\"Python 实现 (使用 bleak 库)\"></a>Python 实现 (使用 <code>bleak</code> 库)</h3><p><code>bleak</code> 是一个基于 <code>asyncio</code> 的现代 Python 库，提供了跨平台（Windows, macOS, Linux）的 BLE Central 功能接口。</p>\n<p><strong>核心代码解析:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> bleak <span class=\"keyword\">import</span> BleakScanner, BleakClient, BleakError</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 标准蓝牙心率服务和特征 UUID</span></span><br><span class=\"line\">HEART_RATE_SERVICE_UUID = <span class=\"string\">&quot;0000180d-0000-1000-8000-00805f9b34fb&quot;</span></span><br><span class=\"line\">HEART_RATE_MEASUREMENT_CHAR_UUID = <span class=\"string\">&quot;00002a37-0000-1000-8000-00805f9b34fb&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 数据处理回调</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">handle_heart_rate_notification</span>(<span class=\"params\">data: <span class=\"built_in\">bytearray</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    回调函数，解析来自 0x2A37 特征的通知数据.</span></span><br><span class=\"line\"><span class=\"string\">    sender: 在 Windows 上是特征句柄 (handle), 其他平台可能是 0.</span></span><br><span class=\"line\"><span class=\"string\">    data: 原始字节数据 (bytearray).</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        flags = data[<span class=\"number\">0</span>]</span><br><span class=\"line\">        hr_format_is_uint16 = (flags &amp; <span class=\"number\">0x01</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 根据 Flag bit 0 解析心率值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> hr_format_is_uint16:</span><br><span class=\"line\">            <span class=\"comment\"># UINT16 format, bytes 1 and 2, Little-Endian</span></span><br><span class=\"line\">            heart_rate_value = <span class=\"built_in\">int</span>.from_bytes(data[<span class=\"number\">1</span>:<span class=\"number\">3</span>], byteorder=<span class=\"string\">&#x27;little&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"comment\"># UINT8 format, byte 1</span></span><br><span class=\"line\">            heart_rate_value = data[<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Heart Rate: <span class=\"subst\">&#123;heart_rate_value&#125;</span> bpm&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 可选: 解析 RR-Intervals (如果 Flag bit 4 被设置)</span></span><br><span class=\"line\">        <span class=\"comment\"># rr_interval_present = (flags &gt;&gt; 4) &amp; 0x01</span></span><br><span class=\"line\">        <span class=\"comment\"># if rr_interval_present:</span></span><br><span class=\"line\">        <span class=\"comment\">#     offset = 3 if hr_format_is_uint16 else 2</span></span><br><span class=\"line\">        <span class=\"comment\">#     rr_intervals_ms = []</span></span><br><span class=\"line\">        <span class=\"comment\">#     while offset &lt; len(data):</span></span><br><span class=\"line\">        <span class=\"comment\">#         rr_raw = int.from_bytes(data[offset:offset+2], byteorder=&#x27;little&#x27;)</span></span><br><span class=\"line\">        <span class=\"comment\">#         rr_intervals_ms.append(round((rr_raw / 1024.0) * 1000.0)) # Convert to ms</span></span><br><span class=\"line\">        <span class=\"comment\">#         offset += 2</span></span><br><span class=\"line\">        <span class=\"comment\">#     if rr_intervals_ms:</span></span><br><span class=\"line\">        <span class=\"comment\">#         print(f&quot;  RR Intervals (ms): &#123;rr_intervals_ms&#125;&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">except</span> IndexError:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Error: Received incomplete data: <span class=\"subst\">&#123;data.<span class=\"built_in\">hex</span>()&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Error parsing HR data: <span class=\"subst\">&#123;e&#125;</span>, Raw: <span class=\"subst\">&#123;data.<span class=\"built_in\">hex</span>()&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 主异步任务</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">run_hr_monitor</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Scanning for devices advertising Heart Rate Service...&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 1. 扫描: 使用 BleakScanner 查找广播了 HRS UUID 的设备</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        device = <span class=\"keyword\">await</span> BleakScanner.find_device_by_filter(</span><br><span class=\"line\">            <span class=\"keyword\">lambda</span> d, ad: HEART_RATE_SERVICE_UUID.lower() <span class=\"keyword\">in</span> ad.service_uuids,</span><br><span class=\"line\">            timeout=<span class=\"number\">10.0</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">    <span class=\"keyword\">except</span> BleakError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Bluetooth scanning error: <span class=\"subst\">&#123;e&#125;</span>&quot;</span>)</span><br><span class=\"line\">        device = <span class=\"literal\">None</span>  <span class=\"comment\"># Fallback or handle specific errors</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 也可以使用 discover 获取列表供选择</span></span><br><span class=\"line\">    <span class=\"comment\"># devices = await BleakScanner.discover(service_uuids=[HEART_RATE_SERVICE_UUID], timeout=10.0)</span></span><br><span class=\"line\">    <span class=\"comment\"># ... (device selection logic) ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> device <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;No device advertising the Heart Rate Service found.&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Ensure the device&#x27;s HR broadcasting is enabled in its settings.&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Found device: <span class=\"subst\">&#123;device.name&#125;</span> (<span class=\"subst\">&#123;device.address&#125;</span>)&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Connecting...&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 2. 连接与交互: 使用 BleakClient</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> BleakClient(device.address, timeout=<span class=\"number\">20.0</span>) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> client.is_connected:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Failed to connect.&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Connected successfully!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 3. 订阅通知: 关键步骤</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Subscribing to Heart Rate Measurement notifications (<span class=\"subst\">&#123;HEART_RATE_MEASUREMENT_CHAR_UUID&#125;</span>)...&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">await</span> client.start_notify(HEART_RATE_MEASUREMENT_CHAR_UUID, handle_heart_rate_notification)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subscription successful. Waiting for data... (Press Ctrl+C to stop)&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 保持运行以接收通知</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> client.is_connected:</span><br><span class=\"line\">                <span class=\"keyword\">await</span> asyncio.sleep(<span class=\"number\">1.0</span>)  <span class=\"comment\"># Keep event loop alive</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">except</span> BleakError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Bluetooth operation error: <span class=\"subst\">&#123;e&#125;</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;An unexpected error occurred: <span class=\"subst\">&#123;e&#125;</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 4. 清理: 停止通知 (通常在 async with 退出时自动处理部分断连)</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> client.is_connected:</span><br><span class=\"line\">                <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">await</span> client.stop_notify(HEART_RATE_MEASUREMENT_CHAR_UUID)</span><br><span class=\"line\">                    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Notifications stopped.&quot;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">except</span> BleakError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">                    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Error stopping notifications: <span class=\"subst\">&#123;e&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行入口</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 运行 asyncio 事件循环</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        asyncio.run(run_hr_monitor())</span><br><span class=\"line\">    <span class=\"keyword\">except</span> KeyboardInterrupt:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\nMonitoring stopped by user.&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"comment\"># Catch potential top-level errors (e.g., asyncio issues)</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;\\nTop-level error: <span class=\"subst\">&#123;e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>关键实现点:</strong></p>\n<ol>\n<li><strong><code>BleakScanner.find_device_by_filter</code> &#x2F; <code>discover</code>:</strong> 用于基于广播的服务 UUID (<code>0x180D</code>) 识别潜在的心率设备。这是利用 BLE 广播进行服务发现的核心。</li>\n<li><strong><code>BleakClient(address)</code>:</strong> 建立到目标设备的 GATT 连接。</li>\n<li><strong><code>client.start_notify(UUID, callback)</code>:</strong> 向外设请求开启指定特征 (<code>0x2A37</code>) 的通知，并将接收到的数据包传递给 <code>handle_heart_rate_notification</code> 回调函数处理。这是获取实时数据的关键。</li>\n<li><strong>Data Parsing (<code>handle_heart_rate_notification</code>)</strong>: 严格按照 Bluetooth SIG 对 <code>0x2A37</code> 特征数据格式的定义来解析 <code>bytearray</code>，提取心率值和其他可选信息。</li>\n<li><strong><code>asyncio</code>:</strong> <code>bleak</code> 依赖 <code>asyncio</code> 进行异步操作管理，允许程序在等待蓝牙 I&#x2F;O 时保持响应。</li>\n</ol>\n<h3 id=\"关于华为手表（及类似设备）的兼容性\"><a href=\"#关于华为手表（及类似设备）的兼容性\" class=\"headerlink\" title=\"关于华为手表（及类似设备）的兼容性\"></a>关于华为手表（及类似设备）的兼容性</h3><p>华为手表或其他品牌设备能否被此脚本监测，<strong>取决于该设备是否遵循了 Bluetooth SIG 定义的标准 Heart Rate Service (UUID <code>0x180D</code>) 规范，并且是否提供了“心率广播”或类似的模式</strong>。</p>\n<p>这种模式意味着：</p>\n<ol>\n<li>设备在其 BLE 广播包中宣告 HRS 服务，或者在连接后提供该服务。</li>\n<li>允许中心设备在<strong>无需强制配对</strong>的情况下连接并订阅 Heart Rate Measurement 特征 (<code>0x2A37</code>) 的通知。</li>\n</ol>\n<p><strong>用户必须在设备端（通常是手表设置 如华为手表的设置-心率广播）手动开启此“心率广播”功能。</strong> 这不是协议层面的特殊处理，而是设备固件提供的一个标准功能开关。如果设备遵循标准且此功能已开启，上述 Python 脚本就能与之正常通信。但如小米手环等设备，因其进行了数据加密，无法直接通过蓝牙协议进行通信。</p>\n<h3 id=\"技术考量\"><a href=\"#技术考量\" class=\"headerlink\" title=\"技术考量\"></a>技术考量</h3><ul>\n<li><strong>异步编程模型:</strong> 理解 <code>asyncio</code> 的事件循环、<code>async/await</code> 语法对于调试和扩展 <code>bleak</code> 应用至关重要。</li>\n<li><strong>权限:</strong> 运行 BLE 扫描和连接通常需要相应的系统权限。</li>\n<li><strong>连接稳定性与错误处理:</strong> 实际应用中需处理连接丢失 (<code>client.is_connected</code> 检查)、设备无响应、数据解析错误等多种异常情况。</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>通过利用 Python 的 <code>bleak</code> 库和 <code>asyncio</code>，开发者可以有效地与实现了标准 BLE Heart Rate Service 并支持广播模式的设备进行通信。核心在于理解 GATT 服务发现、特征订阅（特别是 Notify 属性）以及按照官方规范解析特征数据。设备（如兼容的华为手表）的可用性依赖于其对蓝牙标准的遵循和用户侧相应功能的启用。</p>\n","feature":false,"text":"本文探讨了如何使用 Python 脚本与支持蓝牙低功耗（BLE）心率广播的设备交互以获取实时心率数据。重点分析了 BLE 协议、GATT 服务模型，以及具体方法。此外，还讨论了华为手表等设备的兼容性问题。...","permalink":"/post/Python：蓝牙心率广播设备监测（BLE-心率监测器）技术解析与实现","photos":[],"count_time":{"symbolsCount":"7.2k","symbolsTime":"7 mins."},"categories":[{"name":"编程","slug":"编程","count":16,"path":"api/categories/编程.json"},{"name":"Python","slug":"编程/Python","count":13,"path":"api/categories/编程/Python.json"}],"tags":[{"name":"官方","slug":"官方","count":17,"path":"api/tags/官方.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8A%80%E6%9C%AF%E8%83%8C%E6%99%AF%EF%BC%9ABLE-%E4%B8%8E-GATT-%E5%BF%83%E7%8E%87%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">技术背景：BLE 与 GATT 心率服务</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Python-%E5%AE%9E%E7%8E%B0-%E4%BD%BF%E7%94%A8-bleak-%E5%BA%93\"><span class=\"toc-text\">Python 实现 (使用 bleak 库)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8E%E5%8D%8E%E4%B8%BA%E6%89%8B%E8%A1%A8%EF%BC%88%E5%8F%8A%E7%B1%BB%E4%BC%BC%E8%AE%BE%E5%A4%87%EF%BC%89%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\"><span class=\"toc-text\">关于华为手表（及类似设备）的兼容性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8A%80%E6%9C%AF%E8%80%83%E9%87%8F\"><span class=\"toc-text\">技术考量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"LaoShui","slug":"blog-author","avatar":"/favicon.ico","link":"/","description":"<p>不忘初心，青春朝气永在</p><p>志在千秋，百年恰是少年</p>","socials":{"github":"https://github.com/laoshuikaixue","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"aliyun_developer":{"icon":"/svg/aliyun.svg","link":"https://developer.aliyun.com/profile/dtvevsc2d4xha"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"基于函数计算3.0 Stable Diffusion Serverless API 的AI艺术字头像生成应用搭建与实践的报告","uid":"1ce36757e3e88b272b7c9f6027d9ece0","slug":"基于函数计算3-0-Stable-Diffusion-Serverless-API-的AI艺术字头像生成应用搭建与实践的报告","date":"2024-02-08T10:10:35.000Z","updated":"2024-02-09T08:38:57.989Z","comments":true,"path":"api/articles/基于函数计算3-0-Stable-Diffusion-Serverless-API-的AI艺术字头像生成应用搭建与实践的报告.json","keywords":null,"cover":"/img/240208/1.png","text":"本文主要分享了自己基于函数计算3.0 Stable Diffusion Serverless API 的AI艺术字头像生成应用搭建与实践的报告...","permalink":"/post/基于函数计算3-0-Stable-Diffusion-Serverless-API-的AI艺术字头像生成应用搭建与实践的报告","photos":[],"count_time":{"symbolsCount":516,"symbolsTime":"1 mins."},"categories":[{"name":"编程","slug":"编程","count":16,"path":"api/categories/编程.json"},{"name":"fc AIGC","slug":"编程/fc-AIGC","count":1,"path":"api/categories/编程/fc-AIGC.json"},{"name":"Serverless","slug":"编程/fc-AIGC/Serverless","count":1,"path":"api/categories/编程/fc-AIGC/Serverless.json"},{"name":"人工智能","slug":"编程/fc-AIGC/Serverless/人工智能","count":1,"path":"api/categories/编程/fc-AIGC/Serverless/人工智能.json"},{"name":"函数计算","slug":"编程/fc-AIGC/Serverless/人工智能/函数计算","count":1,"path":"api/categories/编程/fc-AIGC/Serverless/人工智能/函数计算.json"}],"tags":[{"name":"官方","slug":"官方","count":17,"path":"api/tags/官方.json"}],"author":{"name":"LaoShui","slug":"blog-author","avatar":"/favicon.ico","link":"/","description":"<p>不忘初心，青春朝气永在</p><p>志在千秋，百年恰是少年</p>","socials":{"github":"https://github.com/laoshuikaixue","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"aliyun_developer":{"icon":"/svg/aliyun.svg","link":"https://developer.aliyun.com/profile/dtvevsc2d4xha"}}}},"feature":true},"next_post":{"title":"开源：升学E网通绕过会员以及点击检测（已失效）","uid":"c0cbd51e6cc6162b96e9aed7b5281420","slug":"开源：升学E网通绕过会员以及点击检测","date":"2024-07-18T07:37:54.000Z","updated":"2024-08-22T05:33:02.410Z","comments":true,"path":"api/articles/开源：升学E网通绕过会员以及点击检测.json","keywords":null,"cover":[],"text":"本文分享了对升学E网通的研究开源项目...","permalink":"/post/开源：升学E网通绕过会员以及点击检测","photos":[],"count_time":{"symbolsCount":955,"symbolsTime":"1 mins."},"categories":[{"name":"开源","slug":"开源","count":1,"path":"api/categories/开源.json"},{"name":"编程","slug":"开源/编程","count":1,"path":"api/categories/开源/编程.json"}],"tags":[{"name":"官方","slug":"官方","count":17,"path":"api/tags/官方.json"}],"author":{"name":"LaoShui","slug":"blog-author","avatar":"/favicon.ico","link":"/","description":"<p>不忘初心，青春朝气永在</p><p>志在千秋，百年恰是少年</p>","socials":{"github":"https://github.com/laoshuikaixue","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"aliyun_developer":{"icon":"/svg/aliyun.svg","link":"https://developer.aliyun.com/profile/dtvevsc2d4xha"}}}},"feature":false}}