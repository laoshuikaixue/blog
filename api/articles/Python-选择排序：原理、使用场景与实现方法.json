{"title":"Python 选择排序：原理、使用场景与实现方法","uid":"0490642c71381612a7160eef78d1d327","slug":"Python-选择排序：原理、使用场景与实现方法","date":"2024-02-09T08:16:22.000Z","updated":"2024-02-09T08:25:37.452Z","comments":true,"path":"api/articles/Python-选择排序：原理、使用场景与实现方法.json","keywords":null,"cover":[],"content":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>选择排序（Selection Sort）是一种简单直观的排序算法，其主要思想是通过不断遍历待排序序列，并在每次遍历时找出剩余未排序部分中的最小（或最大）元素，将其放到已排序序列的末尾。虽然选择排序的时间复杂度并不优秀，但它简洁易懂的逻辑使其成为初学者理解排序算法的理想起点。</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2019/03/selectionSort.gif\" alt=\"选择排序\"></p>\n<h3 id=\"一、选择排序原理\"><a href=\"#一、选择排序原理\" class=\"headerlink\" title=\"一、选择排序原理\"></a>一、选择排序原理</h3><p>选择排序的基本步骤如下：</p>\n<ol>\n<li><strong>寻找最小值</strong>：首先从待排序的数组中选出最小（或最大）的元素。</li>\n<li><strong>交换位置</strong>：将找到的最小元素与数组的第一个未排序元素交换位置，此时第一个元素为已排序区间的最后一个元素。</li>\n<li><strong>重复上述过程</strong>：接着在剩余的未排序序列中重复寻找最小元素并交换的过程，直至整个序列有序。</li>\n</ol>\n<h3 id=\"二、选择排序步骤详解\"><a href=\"#二、选择排序步骤详解\" class=\"headerlink\" title=\"二、选择排序步骤详解\"></a>二、选择排序步骤详解</h3><p>假设有一个无序数组<code>[5, 3, 8, 6, 7, 2]</code>，按照选择排序的过程：</p>\n<ol>\n<li><p>第一轮：</p>\n<ul>\n<li>在所有未排序元素中找到最小值<code>2</code>，并与数组的第一个元素交换位置，得到<code>[2, 3, 8, 6, 7, 5]</code></li>\n</ul>\n</li>\n<li><p>第二轮：</p>\n<ul>\n<li>在剩下的未排序元素<code>[3, 8, 6, 7, 5]</code>中找到最小值<code>3</code>，与当前未排序区间的第一个元素交换位置，得到<code>[2, 3, 8, 6, 7, 5]</code>（这里无需交换，因为<code>3</code>已经位于正确位置）</li>\n</ul>\n</li>\n<li><p>继续这个过程，直到所有元素都已排序。</p>\n</li>\n</ol>\n<h3 id=\"三、选择排序代码实现\"><a href=\"#三、选择排序代码实现\" class=\"headerlink\" title=\"三、选择排序代码实现\"></a>三、选择排序代码实现</h3><p>以下是一个简单的选择排序实现：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">selection_sort</span>(<span class=\"params\">arr</span>):</span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(arr)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 遍历所有数组元素</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"comment\"># 找到剩余未排序部分中的最小元素索引</span></span><br><span class=\"line\">        min_index = i</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, n):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> arr[j] &lt; arr[min_index]:</span><br><span class=\"line\">                min_index = j</span><br><span class=\"line\">                </span><br><span class=\"line\">        <span class=\"comment\"># 将找到的最小元素与未排序区间的第一个元素交换</span></span><br><span class=\"line\">        arr[i], arr[min_index] = arr[min_index], arr[i]</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、选择排序的使用场景\"><a href=\"#四、选择排序的使用场景\" class=\"headerlink\" title=\"四、选择排序的使用场景\"></a>四、选择排序的使用场景</h3><p>尽管选择排序通常不是最优选择，但在特定场景下仍有一定的实用价值：</p>\n<ul>\n<li>稳定性需求：选择排序是一种稳定的排序算法，即相等的元素在排序后相对顺序保持不变，这在处理具有特殊稳定性需求的问题时可能有优势。</li>\n<li>数据量较小且对效率要求不高的场合：对于小规模数据集或者对运行速度要求不苛刻的应用场景，选择排序可以作为一个简单的解决方案。</li>\n</ul>\n<p>然而，选择排序的时间复杂度始终为O(n²)，其性能远不如快速排序、归并排序和堆排序等高效算法。因此，在实际开发、竞赛中，尤其是在对效率有较高要求的情况下，选择排序并非首选方案。</p>\n","feature":false,"text":"本文主要介绍了Python 选择排序：原理、使用场景与实现方法...","permalink":"/post/Python-选择排序：原理、使用场景与实现方法","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"编程","slug":"编程","count":16,"path":"api/categories/编程.json"},{"name":"Python","slug":"编程/Python","count":13,"path":"api/categories/编程/Python.json"}],"tags":[{"name":"官方","slug":"官方","count":17,"path":"api/tags/官方.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%95%E8%A8%80\"><span class=\"toc-text\">引言</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">一、选择排序原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E6%AD%A5%E9%AA%A4%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">二、选择排序步骤详解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">三、选择排序代码实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">四、选择排序的使用场景</span></a></li></ol>","author":{"name":"LaoShui","slug":"blog-author","avatar":"/favicon.ico","link":"/","description":"<p>不忘初心，青春朝气永在</p><p>志在千秋，百年恰是少年</p>","socials":{"github":"https://github.com/laoshuikaixue","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"aliyun_developer":{"icon":"/svg/aliyun.svg","link":"https://developer.aliyun.com/profile/dtvevsc2d4xha"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Python 插入排序：原理、使用场景与实现方法","uid":"0425545bbf78488183c9b7bbe87131db","slug":"Python-插入排序：原理、使用场景与实现方法","date":"2024-02-09T08:27:12.000Z","updated":"2024-02-09T08:30:12.906Z","comments":true,"path":"api/articles/Python-插入排序：原理、使用场景与实现方法.json","keywords":null,"cover":[],"text":"本文主要介绍了Python 插入排序：原理、使用场景与实现方法...","permalink":"/post/Python-插入排序：原理、使用场景与实现方法","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"编程","slug":"编程","count":16,"path":"api/categories/编程.json"},{"name":"Python","slug":"编程/Python","count":13,"path":"api/categories/编程/Python.json"}],"tags":[{"name":"官方","slug":"官方","count":17,"path":"api/tags/官方.json"}],"author":{"name":"LaoShui","slug":"blog-author","avatar":"/favicon.ico","link":"/","description":"<p>不忘初心，青春朝气永在</p><p>志在千秋，百年恰是少年</p>","socials":{"github":"https://github.com/laoshuikaixue","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"aliyun_developer":{"icon":"/svg/aliyun.svg","link":"https://developer.aliyun.com/profile/dtvevsc2d4xha"}}}},"feature":false},"next_post":{"title":"Python 冒泡排序：原理、使用场景与实现方法","uid":"5a1ed4bfdc47ff55e285206610294889","slug":"Python-冒泡排序：原理、使用场景与实现方法","date":"2024-02-09T08:11:13.000Z","updated":"2024-02-09T08:14:31.905Z","comments":true,"path":"api/articles/Python-冒泡排序：原理、使用场景与实现方法.json","keywords":null,"cover":[],"text":"本文主要介绍了Python 冒泡排序：原理、使用场景与实现方法...","permalink":"/post/Python-冒泡排序：原理、使用场景与实现方法","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"编程","slug":"编程","count":16,"path":"api/categories/编程.json"},{"name":"Python","slug":"编程/Python","count":13,"path":"api/categories/编程/Python.json"}],"tags":[{"name":"官方","slug":"官方","count":17,"path":"api/tags/官方.json"}],"author":{"name":"LaoShui","slug":"blog-author","avatar":"/favicon.ico","link":"/","description":"<p>不忘初心，青春朝气永在</p><p>志在千秋，百年恰是少年</p>","socials":{"github":"https://github.com/laoshuikaixue","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"aliyun_developer":{"icon":"/svg/aliyun.svg","link":"https://developer.aliyun.com/profile/dtvevsc2d4xha"}}}},"feature":false}}