{"title":"信息学奥赛 试除法：高效筛选素数的算法","uid":"32b2866d3e9af05b26a9546f73f441fc","slug":"信息学奥赛-试除法：高效筛选素数的算法","date":"2022-08-01T08:44:57.000Z","updated":"2024-01-20T14:29:47.664Z","comments":true,"path":"api/articles/信息学奥赛-试除法：高效筛选素数的算法.json","keywords":null,"cover":null,"content":"<h2 id=\"题目介绍\"><a href=\"#题目介绍\" class=\"headerlink\" title=\"题目介绍\"></a>题目介绍</h2><p>素数是指只能被1和自身整除的正整数，例如2、3、5、7等。现在给定一个范围内的整数序列，你需要编写一个算法来筛选出其中的素数。</p>\n<h2 id=\"题目解析\"><a href=\"#题目解析\" class=\"headerlink\" title=\"题目解析\"></a>题目解析</h2><p>题目要求我们从给定的整数序列中筛选出素数。我们需要设计一个算法来判断一个数是否为素数，并将素数添加到结果集合中。</p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>为了判断一个数是否为素数，我们可以使用试除法。对于一个待判断的数x，我们从2开始，一直试除到sqrt(x)为止。如果在这个过程中发现x可被某个数整除，则x不是素数；否则x是素数。</p>\n<p>具体的算法如下：</p>\n<ol>\n<li>定义一个空集合result，用于存储筛选出的素数。</li>\n<li>对于每个待判断的数x，从2开始循环到sqrt(x)，判断x是否能够被这些数整除。</li>\n<li>如果x不能被任何数整除，则将x添加到result集合中。</li>\n<li>循环结束后，返回result作为结果。</li>\n</ol>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sieve_of_eratosthenes</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    primes = []</span><br><span class=\"line\">    is_prime = [<span class=\"literal\">True</span>] * (n + <span class=\"number\">1</span>)</span><br><span class=\"line\">    is_prime[<span class=\"number\">0</span>] = is_prime[<span class=\"number\">1</span>] = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, <span class=\"built_in\">int</span>(math.sqrt(n)) + <span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_prime[i]:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i * i, n + <span class=\"number\">1</span>, i):</span><br><span class=\"line\">                is_prime[j] = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, n + <span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_prime[i]:</span><br><span class=\"line\">            primes.append(i)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> primes</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试示例</span></span><br><span class=\"line\">n = <span class=\"number\">100</span></span><br><span class=\"line\">result = sieve_of_eratosthenes(n)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(result)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解题技巧\"><a href=\"#解题技巧\" class=\"headerlink\" title=\"解题技巧\"></a>解题技巧</h2><ol>\n<li>在试除法中，我们只需要循环到sqrt(x)即可，因为如果存在大于sqrt(x)的因子，那么一定存在小于sqrt(x)的因子。</li>\n<li>使用一个布尔数组is_prime来记录每个数是否为素数，初始化为True，然后依次将非素数位置的值置为False，这样可以避免重复判断和减少计算量。</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文介绍了如何使用试除法筛选素数，通过这种方法，我们可以高效地得到一个范围内的素数集合。当处理类似问题时，我们可以考虑使用试除法来判断是否为素数。</p>\n","feature":true,"text":"本文介绍了在Python代码中如何使用试除法高效筛选素数...","permalink":"/post/信息学奥赛-试除法：高效筛选素数的算法","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"编程","slug":"编程","count":15,"path":"api/categories/编程.json"},{"name":"Python","slug":"编程/Python","count":12,"path":"api/categories/编程/Python.json"}],"tags":[{"name":"官方","slug":"官方","count":16,"path":"api/tags/官方.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">题目介绍</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">题目解析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">解题思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">代码实现</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E9%A2%98%E6%8A%80%E5%B7%A7\"><span class=\"toc-text\">解题技巧</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"LaoShui","slug":"blog-author","avatar":"/favicon.ico","link":"/","description":"<p>不忘初心，青春朝气永在</p><p>志在千秋，百年恰是少年</p>","socials":{"github":"https://github.com/laoshuikaixue","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"aliyun_developer":{"icon":"/svg/aliyun.svg","link":"https://developer.aliyun.com/profile/dtvevsc2d4xha"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"解密经典数学问题：跳马问题的DFS解法","uid":"a6ce43f330920306cdee8f98cd33fefd","slug":"解密经典数学问题：跳马问题的DFS解法","date":"2023-08-01T08:42:48.000Z","updated":"2024-01-20T14:37:39.357Z","comments":true,"path":"api/articles/解密经典数学问题：跳马问题的DFS解法.json","keywords":null,"cover":null,"text":"本文介绍了跳马问题的背景和解析，并提供了一种基于DFS的解题思路。通过详细的代码实现和解题技巧的讲解，读者能够对跳马问题有更深入的理解和掌握...","permalink":"/post/解密经典数学问题：跳马问题的DFS解法","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"编程","slug":"编程","count":15,"path":"api/categories/编程.json"},{"name":"Python","slug":"编程/Python","count":12,"path":"api/categories/编程/Python.json"}],"tags":[{"name":"官方","slug":"官方","count":16,"path":"api/tags/官方.json"}],"author":{"name":"LaoShui","slug":"blog-author","avatar":"/favicon.ico","link":"/","description":"<p>不忘初心，青春朝气永在</p><p>志在千秋，百年恰是少年</p>","socials":{"github":"https://github.com/laoshuikaixue","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"aliyun_developer":{"icon":"/svg/aliyun.svg","link":"https://developer.aliyun.com/profile/dtvevsc2d4xha"}}}},"feature":true},"next_post":{}}